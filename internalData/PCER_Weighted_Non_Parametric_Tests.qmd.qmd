---
title: "PCER Method for Weighted Non-Parametric Tests"
format: html
editor: visual
---

## Non Parametric Case Study

The following libraries will be required to run the codes.

```{r}
library(gMCPLite)
library(rpact)
library(mvtnorm)
library(knitr)
```

### Notation

$k =\{1,2\}$ : Index for the stages.

$I_1 = \{1,2,..D\}$ : Index for the primary hypothesis at stage-1.

$J$ : Index for any intersection hypothesis.

$j$ : Index for any primary hypothesis as a part of intersection $J$

$w_{j,J}$ : Weights obtain from the stage-1 graph for test the intersection hypothesis $H_J$

$p_{j,k}$ : Raw p-values corresponding to jth primary hypothesis based on the cumulative data at stage k

Let's consider a two-stage group sequential design with the given initial weights $(W_I)$ and the transition matrix$(G)$ for testing the primary hypothesis($I_1$) . Let's also assume the design type-1 error is $\alpha$ with the stage-1 information fraction as $t_1$ .

```{r}
###############################  Inputs  #########################################
#number of hypothesis
nHypothesis <- 4

#number of looks
nlooks <- 2

#Initial Weights
WI <-  c(0.5,0.5,0,0) 

#Initial Transition matrix
G <- matrix(c(0,0.5,0.5,0,
              0.5,0,0,0.5,
              0,1,0,0,
              1,0,0,0),
              nrow = nHypothesis, byrow = T)

# alpha
alpha <- 0.025

#Information Fraction
info_frac <- c(0.5,1)

#Stage-1 Raw p-values
Stage1Pvalues <- c(0.00045,0.0952,0.0225,0.1104)

######################### End of inputs #########################################
```

### Weights for the Intersection Hypothesis

With the initial weight and transition matrix we can compute the weights for all the intersection hypothesis$(H_J \space where \space J \subseteq I_1)$ by using gmcpLite package as follows:

```{r}

#Computation of Intersection weights
WH <- as.data.frame(gMCPLite::generateWeights(g = G,w = WI))

colnames(WH) <- c(paste('H',1:nHypothesis,sep = ''), 
                  paste('W',1:nHypothesis,sep = ''))


knitr::kable(WH,caption = 'Table-1:Weights for Intersection hypothesis',
             digits = 3, align = 'c',padding = 3)
```

### The Planned boundaries for each primary hypotheses $H_j$ as a part of intersection hypothesis $H_J$

The group sequential boundaries for each primary hypothesis $(j)$ as a part of an intersection hypothesis $(J \space where \space J \subseteq I_1)$ can be obtained from the following equations. Refer to eq 8.3.11 in chapter 8.

$P_{H_J}[p_{j,1} \leq \alpha_{j,1}(w_{j,J} * \alpha)] = \alpha_{j,1}(w_{j,J} * \alpha)$

$P_{H_J}[[p_{j,1} > \alpha_{j,1}(w_{j,J} * \alpha)] \cap [p_{j,2} \leq \alpha_{j,2}(w_{j,J} * \alpha)] ] = (w_{j,J} * \alpha) - \alpha_{j,1}(\gamma)$

The group-sequential boundaries can be computed by using rpact package as follows.

```{r}
#Function to compute the Stage-wise planned boundaries for all intersection #hypothesis
getPlanBdry <- function(alpha, info_frac, WH, typeOfDesign = 'asOF')
{
  #Function to compute the Stage-wise planned boundaries for a primary hypothesis
  #Hj as a part of intersection hypothesis(HJ)
  PlanBdry <- function(sig_level, info_frac, typeOfDesign = 'asOF')
  {
    des <- getDesignGroupSequential(kMax = 2, alpha = sig_level, 
                              informationRates =info_frac, 
                              typeOfDesign = typeOfDesign)
    des$stageLevels
  }
  
  #Significance level for the primary hypothesis 
  sig_level <- alpha*WH[,(ncol(WH)/2+1):ncol(WH)]
  
  Stage1Bdry <- Stage2Bdry <- matrix(0, nrow = nrow(WH),ncol = nHypothesis)
  colnames(Stage1Bdry) <- paste('a', 1:nHypothesis,'1', sep='')
  colnames(Stage2Bdry) <- paste('a', 1:nHypothesis,'2', sep='')
  for(i in 1:nrow(WH))
  {
    for(j in 1:length(WI))
    {
      if(sig_level[i,j] != 0)
      {
        bdry <- PlanBdry(sig_level = sig_level[i,j], info_frac=info_frac, 
                         typeOfDesign =   typeOfDesign)
        Stage1Bdry[i,j] <- bdry[1]
        Stage2Bdry[i,j] <- bdry[2]
      }
    }
  }
  list('Stage1Bdry'=Stage1Bdry, 'Stage2Bdry'=Stage2Bdry)
}

planBdry <- getPlanBdry(alpha=alpha, info_frac = info_frac, WH = WH, 
                        typeOfDesign = 'asOF')

planBdry_df <- cbind(WH[,1:(ncol(WH)/2)],
                     planBdry$Stage1Bdry,
                     planBdry$Stage2Bdry)


knitr::kable(planBdry_df,caption = 'Stage-1 & Stage-2 planned boundaries',
              digits = 6, align = 'c',padding = 12)
```

### Stage-1 Analysis

The Stage-1 decision function for an intersection hypothesis is defined as

$\varphi_J = 1$ if any $j \in J$; $p_{j,1} \leq \alpha_{j,1}(w_{j,J} * \alpha)$

The primary hypothesis $H_j$ for any $j\in I_1$ can be rejected by a closed test if $\varphi_J = 1$ for all intersection hypotheses($H_J$) containing the primary hypothesis is rejected.

```{r}

#function to check pjk < ajk
checkRejection <- function(pValues, boundary)
{
  unlist(lapply(1:nrow(boundary), function(x){any(pValues <= boundary[x,])}))
}

Stage1AnalysisDF <- data.frame(cbind(WH[,1:(ncol(WH)/2)],planBdry$Stage1Bdry),
                     'Rejected'=checkRejection(pValues=Stage1Pvalues, 
                                               boundary=planBdry$Stage1Bdry))


knitr::kable(Stage1AnalysisDF, digits = 6, align = 'c',padding = 3,
             caption = 'Rejection Status for all intersection hypothesis')
```

**Rejection Status for the primary hypothesis**

Final analysis of the primary hypothesis based on the above table.

```{r}
getRejStatus <- function(nHypothesis, Stage1AnalysisDF)
{
  rej_flag <- rep(NA, nHypothesis)
  namesHypo <- paste('H',1:nHypothesis,sep = '')

  for(i in 1:nHypothesis)
  {
    rej_flag[i]<-all(Stage1AnalysisDF[Stage1AnalysisDF[namesHypo[i]]==1,]$Rejected
                       , na.rm =T)
  }
  Stage1RejStatus <- as.data.frame(matrix(rej_flag,nrow = 1))
  colnames(Stage1RejStatus) <- namesHypo
  Stage1RejStatus
}


knitr::kable(getRejStatus(nHypothesis, Stage1AnalysisDF), align = 'c',padding = 8,
             caption = "Stage-1 regection status(TRUE = Rejected)")
```

## Adaptation

### Computation of PCER

The Partial Conditional Error for the primary hypothesis $(j)$ as a part of an intersection hypothesis $(J \space where \space J \subseteq I_2)$ can be obtained from the following equations

$A_{j,J}(w_{j,J} * \alpha) = P[p_{j,2} \leq \alpha_2(w_{j,J} * \alpha) \space | \space p_{j,1}]$

In Z-scale:

$A_{j,J}(w_{j,J} * \alpha) = P[Z_{j,2} \geq \Phi^{-1}(1-\alpha_2(w_{j,J}*\alpha) \space | \space Z_{j,1} = \Phi^{-1}(1-p_{j,1}])]$

**Note:** The conditional probability can be computed by using the Bivariate Normal property as follows $(X_1|X2=x_2)\sim N(\mu_1 + \frac{\sigma_{12}}{\sigma_{22}}*(x2-\mu_2), \sqrt{\sigma_{11}-\frac{\sigma_{12}^2}{\sigma_{22}}} )$

Where $(X1,X2) \sim BVN(\mu, \Sigma)$

$\mu = (\mu_1, \mu_2)$ and $\Sigma = \begin{bmatrix} \sigma_{11} & \sigma_{12}\\ \sigma_{12} & \sigma_{22} \end{bmatrix}$

By using the above property we can similarly compute the PCER

$E(Z_{j,2}) = E(Z_{j,1}) = 0$

$\Sigma = \begin{bmatrix} 1 & \sqrt{n_{j,1}/n_{j,2}}\\ \sqrt{n_{j,1}/n_{j,2}} & 1 \end{bmatrix}$

$n_{j,1}, n_{j,2}$ are the stage-wise cumulative sample size to test the primary hypothesis $H_j$

The CER for the intersection hypothesis is defined as $B_J = \sum_{j \in J} A_{j,J}(w_{j,J} * \alpha)$

```{r}
#Component-wise PCER
CERperPriHyp <- function(a2, p1, info_frac)
{
  r <- sqrt(info_frac[1]) #sqrt(n1/n2) = sqrt(t1)
  1-pnorm(qnorm(1-a2),mean = r*qnorm(1-p1), sd = sqrt(1-r^2))
}

#Function to compute the component-wise PCER(Aj) 
getPCER <- function(Stage2Bdry,Stage1Pvalues,info_frac)
{
  A <- data.frame(matrix(0, nrow = nrow(WH), ncol = length(WI)))
  for(i in 1:nrow(A))
  {
    for(j in 1:ncol(A))
    {
      if(Stage2Bdry[i,j] != 0)
      {
        A[i,j] <- CERperPriHyp(a2 = Stage2Bdry[i,j], p1 = Stage1Pvalues[j],
                               info_frac=info_frac)
      }
    }
  }
  names(A) <- paste('A',1:length(WI),sep='')
  PCER <- cbind(WH[,1:(length(WH)/2)],A)
  PCER
}

PCER <- getPCER(Stage2Bdry = planBdry$Stage2Bdry, Stage1Pvalues = Stage1Pvalues, 
                info_frac= info_frac)
PCER$B <- rowSums(PCER[,grep('A',names(PCER))])

knitr::kable(PCER, caption = 'PCER for Intersection Hypothesis',
              digits = 6, align = 'c',padding = 12)
```

### Boundaries for Stage-2 analysis

For stage-2 final analysis the adjusted boundaries are defined as $v_{j,J}*B_J$ where $v_{j,J}$ are any weights satisfying $v_{j,J} = 0$ for all $j \notin J$ and $\sum_{j \in J} v_{j,J} \leq 1$

**Choice of** $v_{j,J}$

**Method 1:**

By using the modified weights i.e. $v_{j,J} = w^*_{j,J}$ where $w^*_{j,J}$ is the weights for the intersection hypothesis $H_J$ ; $J \subseteq I_2$ obtained from the new stage-2 graph $W_{I_2}, G_2$

**Method 2:**

Another choice is suggested by Klinglmueller et al. \[2014\] as $v_{j,J} = \frac{A_{j,J}(w_{j,J}^{*} * \gamma_J)}{B_J}$ if $w_{j,J}^{*},B_J >0$

where $\gamma_J$ is a constant that solves $\sum_{j \in J} A_{j,J}(w_{j,J}^{*} * \gamma_J) = B_J$ and

Now if we do not modify the testing strategy $w_{j,J}^{*}=w_{j,J}$ implies $v_{j,J}*B_J=A_{j,J}(w_{j,J})$

If the weights are modified then from the following steps we can find the optimum boundaries.

**Steps to find the** $\gamma_J$

1\. The intersection hypothesis J

2\. Set the initial $\gamma_J$ = g

3\. level of each primary hypothesis is defined as $w_{j,J}^{*}*g$

4\. Search $\alpha_{j,2}(w_{j,J}^{*}*g)$ by solving $P_{H_J}[[p_{j,1} > \alpha_{j,1}] \cap [p_{j,2} \leq \alpha_{j,2}(w_{j,J}^{*}*g)] ] = w_{j,J}^{*}*g - \alpha_{j,1}$ where $\alpha_{j,1}$ is the planned stage-1 boundary\]

5\. Compute $A_{j,J}(w_{j,J}^{*}*g)= P[p_{j,2} \leq \alpha_{j,2}(w_{j,J}^{*}*g) \space | \space p_{j,1}]$

6\. Repeat step2-5 until $\sum_{j \in J} A_{j,J}(w_{j,J}^{*} * g) = B_J$

7\. Repeat the process for all the intersection hypothesis.

**Comments:** In the Klinglmueller et al. paper the interim look is only used for selection and modification of testing strategy which means the stage-2 boundary is not a group-sequential boundary but the level of significance, in that case step-4 is not required and we can directly compute the adjusted PCER as $A_{j,J}(w_{j,J}^{*}*g) = P[p_{j,2} \leq w_{j,J}^{*}*g \space | \space p_{j,1}]$

### Stage-2 Inputs

The following section is to provide the inputs for Stage-2 analysis.

```{r}
############### Stage-2 Inputs #####################
#Index for the stage-2 hypothesis
I2 <- c(1,2,3,4)

#Initial Weight for stage-2
WI2 <- c(0.75,0.25,0,0)

#Transition Matrix for stage-2
G2 <- matrix(c(0,0.75,0.25,0,
              0.75,0,0,0.25,
              0,1,0,0,
              1,0,0,0),
              nrow = length(I2), byrow = T)
############ End of Stage-2 Inputs ################
```

### Weights for the Intersection hypotheses at Stage-2

Based on the new weights and transition matrix the modified weights for the intersection hypothesis are

```{r}
#Computation of Intersection weights
WH2 <- as.data.frame(gMCPLite::generateWeights(g = G2,w = WI2))

colnames(WH2) <- c(paste('H',I2,sep = ''), 
                  paste('W',I2,sep = ''))


knitr::kable(WH2,digits = 3, align = 'c',padding = 4,
             caption = 'Modified Weights for Intersection hypothesis at Stage-2')
```

### Adjusted Boundary for Stage-2

**Method 1**

```{r}

nameHypo2 <- paste('H',I2,sep = '')
nameStage1Bdry <- paste('a',I2,'1',sep = '')

getIndex <- function(dfL, dfR, nameHypo2)
{
  idxL <- unlist(
    lapply(1:nrow(dfL), function(i){ paste(dfL[i,nameHypo2], collapse = '')}))
  
  idxR <- unlist(
    lapply(1:nrow(dfR), function(i){ paste(dfR[i,nameHypo2], collapse = '')}))
  match(idxR,idxL,nomatch = 0)
}

#index for the stage-2 intersection hypothesis
idx <- getIndex(dfL=PCER, dfR=WH2, nameHypo2=nameHypo2)

#CER for the stage-2 intersection hypothesis
BJ <- PCER[idx, "B"]

#Stage-1 boundary for the stage-2 intersection hypothesis
a1 <- planBdry$Stage1Bdry[idx,nameStage1Bdry]

#Adjusted boundary by Method-1
Stage2bdryAdjM1 <- WH2[,grep('W',names(WH2))]*BJ
names(Stage2bdryAdjM1) <- paste('v',I2,'*B',sep = '')

knitr::kable(cbind(WH2, Stage2bdryAdjM1), digits = 6, align = 'c',padding = 4,
              caption = 'Stage-2 adjusted boundary(Method 1)')
```

**Method-2**

```{r}
#Function to compute the stage-2 boundary 
getStage2Bdry <- function(e, a1, info_frac) #e: sig level, a1: stage-1 boundary
{
  if((e-a1)>0 || e != 0) #compute boundary when the exit prob >0
  {
    exitProb<-function(x)
    {
      upper <- c(qnorm(1-a1), Inf)
      lower <- c(-Inf, qnorm(1-x))
      r <- sqrt(info_frac[1])
      sigma <- matrix(c(1,r, r,1), nrow = 2)
      pmvnorm(lower = lower, upper = upper, sigma = sigma)[1]-(e-a1)
    }
    return(uniroot(f = exitProb, interval = c(0,1), tol = 1E-8)$root)
  }else # else the minimum possible boundary in p-value scale = 0
  {
    return(0)
  }
}

#Function to compute the Adj Boundary based on modified weights 
getStage2BdryAdj <- function(a1,p1,w,BJ,info_frac)
{
  #Function to compute adjusted PCER for arbtrary g
  getAdjPCER <- function(g,a1,p1, w,info_frac)
  {
    e <- w*g 
    a2adj <- unlist(lapply(1:length(e),
                           function(x){getStage2Bdry(e = e[x], a1 = a1[x],
                                                     info_frac = info_frac)}
    ))
    A_adj <- CERperPriHyp(a2 = a2adj, p1 = p1, info_frac = info_frac)
    A_adj
  }
  
  #Function to search for optimum g
  OptimGamma <- function(x)
  {
    sum(getAdjPCER(g = x,a1 = a1,p1 = p1, w = w,info_frac = info_frac))-BJ
  }
  gOpt <- uniroot(OptimGamma,interval = c(0,1),tol = 1E-8)$root
  PCER_adj <- getAdjPCER(g = gOpt,a1 = a1, p1 = p1, w = w, info_frac = info_frac)
  
  list('gamma'=gOpt, 'AdjBdry'=PCER_adj)
}

#Gamma and adjusted stage-2 boundary(Method-2) for all intersection hypothesis
gamma <- c(); Stage2bdryAdjM2 <-c()
for(i in 1:nrow(WH2))
{
  n <- length(WH2)
  out <- getStage2BdryAdj(a1 = as.numeric(a1[i,]), 
                   p1 = as.numeric(Stage1Pvalues),
                   w =as.numeric(WH2[i,(n/2+1):n]), 
                   BJ = BJ[i],info_frac = info_frac)
  gamma[i] <- out$gamma
  Stage2bdryAdjM2 <- rbind(Stage2bdryAdjM2, out$AdjBdry)
}
colnames(Stage2bdryAdjM2) <- paste('v',I2,'*B',sep = '')
knitr::kable(cbind(WH2,gamma, Stage2bdryAdjM2), digits = 6, align = 'c',
             padding = 4, caption = 'Stage-2 adjusted boundary(Method 2)')
```
