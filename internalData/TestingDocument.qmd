---
title: "Testing of Multi-Arm Multi-Stage Multi-Endpoint(Normal) Simulation"
format: html
editor: visual
---

### Library

```{r, echo = FALSE}
library(devtools)
load_all()
```

## 1. Consistency Testing with Existing East Designs

#### 1.1 Two Sample with Four Endpoints(Normal) (FSD-2S-4EP)

```{r, echo=FALSE}
#Design Alpha
alpha <- 0.025

#Plan Sample Size
SampleSize <- 500

#Number of Arms(Including Control)
nArms <- 2

#Number of Hypothesis
nEps  <- 4

#Arm-wise Mean(The first enty is for Control arm)
Arms.Mean <- list('EP1' = c(0.1,0.3), 
                  'EP2' = c(0.2,0.4),
                  'EP3' = c(0.2,0.4),
                  'EP4' = c(0.3,0.5))

#Arm-wise Standard Deviation(The first enty is for Control arm)
Arms.std.dev <- list('EP1' = c(1,1), 
                     'EP2' = c(1,1),
                     'EP3' = c(1,1),
                     'EP4' = c(1,1))

#Arm-wise Standard Deviation(The first enty is for Control arm)
Arms.alloc.ratio <- c(1,1)

#Correlation between end-points(for respose generation)
EP.Corr <- matrix(c(1,0.5,0.5,0.5,
                    0.5,1,0.5,0.5,
                    0.5,0.5,1,0.5,
                    0.5,0.5,0.5,1),
                    nrow = 4)

#Initial Weights for the primary Hypothesis 
WI <-  c(0.5,0.5,0,0)

#Initial Transition Matrix
G <- matrix(c(0,0.5,0.5,0,
             0.5,0,0,0.5,
             0,1,0,0,
             1,0,0,0),
             nrow = nEps*(nArms-1), byrow = T)

#Test Procedure
test.type <- 'Bonf'

#Information Fraction
info_frac <- 1

#Spending Function Type
typeOfDesign <- "asOF"

#Multiple Winner Choice
MultipleWinners <- T

#Treatment Selection Choice
Selection <- T

#Selection Look 
SelectionLook <- 1

#Selection Endpoint
SelectEndPoint <- 1

#Selection Scale
SelectionScale <- 'pvalue'

#Selection Criteria
SelectionCriterion <- 'best'

#Selection Parameter for the Selection Criteria
SelectionParmeter <- 1

#Keep all the associated hypothesis for the selected arm
KeepAssosiatedEps <- T

#Re-allocation of the sample size 
ImplicitSSR <- 'All'

#Number of simulations
nSimulation <- 100

#Seed
Seed <- 100

#Print Summary Statistics
SummaryStat <- F

#Combining p-value or CER method
Method <- 'CombPValue' #CombPValue/CER


fsd2S4Ep_pc <- simMAMSMEP(alpha = alpha, SampleSize = SampleSize,nArms = nArms,
           nEps = nEps,
           Arms.Mean = Arms.Mean, Arms.std.dev = Arms.std.dev, 
           Arms.alloc.ratio = Arms.alloc.ratio,
           EP.Corr = EP.Corr,WI = WI, G = G, test.type = test.type,
           info_frac = info_frac,
           typeOfDesign = typeOfDesign, MultipleWinners = MultipleWinners, 
           Selection = Selection,SelectionLook = SelectionLook,
           SelectEndPoint = SelectEndPoint,SelectionScale = SelectionScale,
           SelectionCriterion = SelectionCriterion, 
           SelectionParmeter = SelectionParmeter,
           KeepAssosiatedEps=KeepAssosiatedEps,
           ImplicitSSR = ImplicitSSR, nSimulation = nSimulation, 
           Seed = Seed, SummaryStat = SummaryStat,
           Method = Method,plotGraphs = FALSE)

Method <- 'CER' #CombPValue/CER
fsd2S4Ep_cer <- simMAMSMEP(alpha = alpha, SampleSize = SampleSize,nArms = nArms,
           nEps = nEps,
           Arms.Mean = Arms.Mean, Arms.std.dev = Arms.std.dev, 
           Arms.alloc.ratio = Arms.alloc.ratio,
           EP.Corr = EP.Corr,WI = WI, G = G, test.type = test.type,
           info_frac = info_frac,
           typeOfDesign = typeOfDesign, MultipleWinners = MultipleWinners, 
           Selection = Selection,SelectionLook = SelectionLook,
           SelectEndPoint = SelectEndPoint,SelectionScale = SelectionScale,
           SelectionCriterion = SelectionCriterion, 
           SelectionParmeter = SelectionParmeter,
           KeepAssosiatedEps=KeepAssosiatedEps,
           ImplicitSSR = ImplicitSSR, nSimulation = nSimulation, 
           Seed = Seed, SummaryStat = SummaryStat,
           Method = Method,plotGraphs = FALSE)

```

**Results**

**Combining P-values : Bonferroni Test**

```{r,echo=FALSE}
fsd2S4Ep_pc$Overall_Powers
```

**CER : Non-Parametric Test**

```{r, echo=FALSE}
fsd2S4Ep_cer$Overall_Powers
```

**East Benchmarks**

|                   |        |
|-------------------|--------|
| Global Power      | 0.6671 |
| Conjunctive Power | 0.2811 |
| Disjunctive Power | 0.6671 |
| FWER              | 0      |

**Under Null**

```{r,echo=FALSE}
#Arm-wise Mean(The first enty is for Control arm)
Arms.Mean <- list('EP1' = c(0.1,0.1), 
                  'EP2' = c(0.2,0.2),
                  'EP3' = c(0.2,0.2),
                  'EP4' = c(0.3,0.3))

#Arm-wise Standard Deviation(The first enty is for Control arm)
Arms.std.dev <- list('EP1' = c(1,1), 
                     'EP2' = c(1,1),
                     'EP3' = c(1,1),
                     'EP4' = c(1,1))

#Combining p-value or CER method
Method <- 'CombPValue' #CombPValue/CER


fsd2S4Ep_pc_Null <- simMAMSMEP(alpha = alpha, SampleSize = SampleSize,
           nArms = nArms, nEps = nEps,
           Arms.Mean = Arms.Mean, Arms.std.dev = Arms.std.dev, 
           Arms.alloc.ratio = Arms.alloc.ratio,
           EP.Corr = EP.Corr,WI = WI, G = G, test.type = test.type,
           info_frac = info_frac,
           typeOfDesign = typeOfDesign, MultipleWinners = MultipleWinners, 
           Selection = Selection,SelectionLook = SelectionLook,
           SelectEndPoint = SelectEndPoint,SelectionScale = SelectionScale,
           SelectionCriterion = SelectionCriterion, 
           SelectionParmeter = SelectionParmeter,
           KeepAssosiatedEps=KeepAssosiatedEps,
           ImplicitSSR = ImplicitSSR, nSimulation = nSimulation, 
           Seed = Seed, SummaryStat = SummaryStat,
           Method = Method,plotGraphs = FALSE)

Method <- 'CER' #CombPValue/CER
fsd2S4Ep_cer_Null <- simMAMSMEP(alpha = alpha, SampleSize = SampleSize,
           nArms = nArms,  nEps = nEps,
           Arms.Mean = Arms.Mean, Arms.std.dev = Arms.std.dev, 
           Arms.alloc.ratio = Arms.alloc.ratio,
           EP.Corr = EP.Corr,WI = WI, G = G, test.type = test.type,
           info_frac = info_frac,
           typeOfDesign = typeOfDesign, MultipleWinners = MultipleWinners, 
           Selection = Selection,SelectionLook = SelectionLook,
           SelectEndPoint = SelectEndPoint,SelectionScale = SelectionScale,
           SelectionCriterion = SelectionCriterion, 
           SelectionParmeter = SelectionParmeter,
           KeepAssosiatedEps=KeepAssosiatedEps,
           ImplicitSSR = ImplicitSSR, nSimulation = nSimulation, 
           Seed = Seed, SummaryStat = SummaryStat,
           Method = Method,plotGraphs = FALSE)


```

**Results**

**Combining P-values : Bonferroni Test**

```{r,echo=FALSE}
fsd2S4Ep_pc_Null$Overall_Powers
```

**CER : Non-Parametric Test**

```{r,echo=FALSE}
fsd2S4Ep_cer_Null$Overall_Powers
```

**East Benchmarks**

|                   |        |
|-------------------|--------|
| Global Power      | 0.0222 |
| Conjunctive Power | 0      |
| Disjunctive Power | 0.0222 |
| FWER              | 0      |

#### 1.3 Four Arm Single Look Single Endpoint - Weighted Bonferroni (FSD-4S-1EP-Bonf)

```{r,echo=FALSE}
#Design Alpha
alpha <- 0.025

#Plan Sample Size
SampleSize <- 400

#Number of Arms(Including Control)
nArms <- 4

#Number of Hypothesis
nEps  <- 1

#Arm-wise Mean(The first enty is for Control arm)
Arms.Mean <- list('EP1' = c(0,0.1,0.3,0.4))

#Arm-wise Standard Deviation(The first enty is for Control arm)
Arms.std.dev <- list('EP1' = c(1,1,1,1))

#Arm-wise Standard Deviation(The first enty is for Control arm)
Arms.alloc.ratio <- c(1,1,1,1)


#Initial Weights for the primary Hypothesis 
WI <-  c(1/3,1/3,1/3)

#Initial Transition Matrix
G <- matrix(c(0,1/2,1/2,
              1/2,0,1/2,
              1/2,1/2,0),
              nrow = nEps*(nArms-1), byrow = T)

#Test Procedure
test.type <- 'Bonf'

#Information Fraction
info_frac <- 1

#Spending Function Type
typeOfDesign <- "asOF"

#Multiple Winner Choice
MultipleWinners <- T

#Treatment Selection Choice
Selection <- T

#Selection Look 
SelectionLook <- 1

#Selection Endpoint
SelectEndPoint <- 1

#Selection Scale
SelectionScale <- 'pvalue'

#Selection Criteria
SelectionCriterion <- 'best'

#Selection Parameter for the Selection Criteria
SelectionParmeter <- 1

#Keep all the associated hypothesis for the selected arm
KeepAssosiatedEps <- T

#Re-allocation of the sample size 
ImplicitSSR <- 'All'

#Combining p-value or CER method
Method <- 'CombPValue' #CombPValue/CER


fsd4S1EPBonf_pc <- simMAMSMEP(alpha = alpha, SampleSize = SampleSize,
          nArms = nArms,
           nEps = nEps,
           Arms.Mean = Arms.Mean, Arms.std.dev = Arms.std.dev, 
           Arms.alloc.ratio = Arms.alloc.ratio,
           EP.Corr = EP.Corr,WI = WI, G = G, test.type = test.type,
           info_frac = info_frac,
           typeOfDesign = typeOfDesign, MultipleWinners = MultipleWinners, 
           Selection = Selection,SelectionLook = SelectionLook,
           SelectEndPoint = SelectEndPoint,SelectionScale = SelectionScale,
           SelectionCriterion = SelectionCriterion, 
           SelectionParmeter = SelectionParmeter,
           KeepAssosiatedEps=KeepAssosiatedEps,
           ImplicitSSR = ImplicitSSR, nSimulation = nSimulation, 
           Seed = Seed, SummaryStat = SummaryStat,
           Method = Method,plotGraphs = FALSE)

Method <- 'CER' #CombPValue/CER
fsd4S1EPBonf_cer <- simMAMSMEP(alpha = alpha, SampleSize = SampleSize,
           nArms = nArms,
           nEps = nEps,
           Arms.Mean = Arms.Mean, Arms.std.dev = Arms.std.dev, 
           Arms.alloc.ratio = Arms.alloc.ratio,
           EP.Corr = EP.Corr,WI = WI, G = G, test.type = test.type,
           info_frac = info_frac,
           typeOfDesign = typeOfDesign, MultipleWinners = MultipleWinners, 
           Selection = Selection,SelectionLook = SelectionLook,
           SelectEndPoint = SelectEndPoint,SelectionScale = SelectionScale,
           SelectionCriterion = SelectionCriterion, 
           SelectionParmeter = SelectionParmeter,
           KeepAssosiatedEps=KeepAssosiatedEps,
           ImplicitSSR = ImplicitSSR, nSimulation = nSimulation, 
           Seed = Seed, SummaryStat = SummaryStat,
           Method = Method,plotGraphs = FALSE)

```

**Results**

**Combining P-values : Bonferroni Test**

```{r,echo=FALSE}
fsd4S1EPBonf_pc$Overall_Powers
```

**CER: Non-Parametric Test**

```{r,echo=FALSE}
fsd4S1EPBonf_cer$Overall_Powers
```

**East Benchmarks**

**Single look, Bonferroni**

|                   |       |
|-------------------|-------|
| Global Power      | 0.716 |
| Conjunctive Power | 0.035 |
| Disjunctive Power | 0.716 |
| FWER              | 0     |

**Single look, Holm's Step Down**

|                   |       |
|-------------------|-------|
| Global Power      | 0.716 |
| Conjunctive Power | 0.086 |
| Disjunctive Power | 0.716 |
| FWER              | 0     |

#### 1.4 Four Arm Single Look Single Endpoint - Weighted Dunnett (FSD-4S-1EP-Dunnett)

```{r,echo=FALSE}
#Test Procedure
test.type <- 'Dunnett'
#Combining p-value or CER method
Method <- 'CombPValue' #CombPValue/CER


fsd4S1EPDunnett_pc <- simMAMSMEP(alpha = alpha, SampleSize = SampleSize,
          nArms = nArms,
           nEps = nEps,
           Arms.Mean = Arms.Mean, Arms.std.dev = Arms.std.dev, 
           Arms.alloc.ratio = Arms.alloc.ratio,
           EP.Corr = EP.Corr,WI = WI, G = G, test.type = test.type,
           info_frac = info_frac,
           typeOfDesign = typeOfDesign, MultipleWinners = MultipleWinners, 
           Selection = Selection,SelectionLook = SelectionLook,
           SelectEndPoint = SelectEndPoint,SelectionScale = SelectionScale,
           SelectionCriterion = SelectionCriterion, 
           SelectionParmeter = SelectionParmeter,
           KeepAssosiatedEps=KeepAssosiatedEps,
           ImplicitSSR = ImplicitSSR, nSimulation = nSimulation, 
           Seed = Seed, SummaryStat = SummaryStat,
           Method = Method,plotGraphs = FALSE)

#Test Procedure
test.type <- 'Parametric'
#Combining p-value or CER method
Method <- 'CER' #CombPValue/CER

fsd4S1EPDunnett_cer <- simMAMSMEP(alpha = alpha, SampleSize = SampleSize,
           nArms = nArms,
           nEps = nEps,
           Arms.Mean = Arms.Mean, Arms.std.dev = Arms.std.dev,
           Arms.alloc.ratio = Arms.alloc.ratio,
           EP.Corr = EP.Corr,WI = WI, G = G, test.type = test.type,
           info_frac = info_frac,
           typeOfDesign = typeOfDesign, MultipleWinners = MultipleWinners,
           Selection = Selection,SelectionLook = SelectionLook,
           SelectEndPoint = SelectEndPoint,SelectionScale = SelectionScale,
           SelectionCriterion = SelectionCriterion,
           SelectionParmeter = SelectionParmeter,
           KeepAssosiatedEps=KeepAssosiatedEps,
           ImplicitSSR = ImplicitSSR, nSimulation = nSimulation,
           Seed = Seed, SummaryStat = SummaryStat,
           Method = Method,plotGraphs = FALSE)

```

**Results**

**Combining p-values : Dunnett's Test**

```{r,echo=FALSE}
fsd4S1EPDunnett_pc$Overall_Powers
```

**CER: Parametric Test**

```{r,echo=FALSE}
fsd4S1EPDunnett_cer$Overall_Powers
```

**East Benchmarks**

**Single look, Dunnett's Step Down**

|                   |       |
|-------------------|-------|
| Global Power      | 0.738 |
| Conjunctive Power | 0.087 |
| Disjunctive Power | 0.738 |
| FWER              | 0     |

**Single Look MAMS-GS**

|                   |        |
|-------------------|--------|
| Global Power      | 0.7441 |
| Conjunctive Power | 0.0392 |
| Disjunctive Power | 0.7441 |
| FWER              | 0      |
