% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pValueAdaptGmcp_Simulation.R
\name{adaptGMCP_SIM}
\alias{adaptGMCP_SIM}
\title{Function to perform Adaptive GMCP simulation for Multi-Arm designs}
\usage{
adaptGMCP_SIM(
  alpha = 0.025,
  SampleSize = 200,
  nArms = 4,
  Arms.Name = NA,
  Arms.Mean = c(0, 0, 0.1, 0.4),
  Arms.std.dev = c(1, 1, 1, 1),
  Arms.alloc.ratio = c(1, 1, 1, 1),
  WI = c(0.2, 0.3, 0.5),
  G = matrix(c(0, 0.25, 0.75, 0.25, 0, 0.75, 0.25, 0.75, 0), byrow = T, nrow = 3),
  test.type = "Partly-Parametric",
  Correlation = matrix(c(1, NA, NA, NA, 1, 0.5, NA, 0.5, 1), byrow = T, nrow = 3),
  info_frac = c(0.5, 1),
  typeOfDesign = "asOF",
  MultipleWinners = T,
  Selection = F,
  SelectionLook = NA,
  SelectionMethods = NA,
  SelectionCriterion = NA,
  SelectionParmeter = NA,
  ImplicitSSR = "None",
  nSimulation = 1000,
  Seed = "Random",
  SummaryStat = F
)
}
\arguments{
\item{alpha}{Type-1 error}

\item{SampleSize}{integer valued Sample Size(default: 200)}

\item{nArms}{integer value to specify the number of arms (default: 4)}

\item{Arms.Name}{Optional, character vector to contain the names of the arms(\code{e.g.- c('Placebo','ActiveCTR','D1','D2','D3','D4')}), defaults = NA}

\item{Arms.Mean}{Numeric Vector to specify the arm-wise mean for response generation}

\item{Arms.std.dev}{Numeric Vector to specify the arm-wise standard deviation for response generation}

\item{Arms.alloc.ratio}{Numeric Vector to specify the arm-wise allocation ratio}

\item{WI}{Vector of Initial Weights for Global Null.}

\item{G}{Numeric Matrix to specify the Transition Matrix.}

\item{test.type}{Character to specify the type of test want to perform; 'Bonf': Bonferroni, 'Sidak': Sidak, 'Simes': Simes, 'Dunnett': Dunnett and  'Partly-Parametric': Partly Parametric Tests}

\item{Correlation}{Numeric Matrix to specify the correlation between test statistics, NA if the correlation is unknown. (applicable only for Dunnett and Partly-Parametric tests)}

\item{info_frac}{Numeric Vector to specify look position as fraction of sample size.(for one look can be specified as 1)}

\item{typeOfDesign}{The type of design. Type of design is one of the following: O'Brien & Fleming ("OF"), Pocock ("P"), Wang & Tsiatis Delta class ("WT"), Pampallona & Tsiatis ("PT"), Haybittle & Peto ("HP"), Optimum design within Wang & Tsiatis class ("WToptimum"), O'Brien & Fleming type alpha spending ("asOF"), Pocock type alpha spending ("asP"), Kim & DeMets alpha spending ("asKD"), Hwang, Shi & DeCani alpha spending ("asHSD"), no early efficacy stop ("noEarlyEfficacy"), default is "OF".}

\item{MultipleWinners}{Logical; TRUE: Stop the trial only no more efficacy is possible, FALSE: Stop if at-least one efficacy is observed}

\item{Selection}{Logical: TRUE if selection required at interim(default = FALSE)}

\item{SelectionLook}{Numeric Vector to specify the selection looks}

\item{SelectionMethods}{Character: Scale parameter on which selection will be based on; 'pvalue': p-value(un-adj) based selection, 'ArmID': Arm-Wise selection}

\item{SelectionCriterion}{Character: 'best': best r, 'threshold': threshold for selection}

\item{SelectionParmeter}{r for best, threshold value for threshold, Arms Index or Names for Arm-Wise selection}

\item{ImplicitSSR}{Character; 'Selection': re-allocate samples only from de-selected arms to available arms, 'All': Allocate all the planned samples(for the look) to the available arms, 'None': No Re-allocation}

\item{nSimulation}{Numeric: number of simulations(default=1000)}

\item{Seed}{'Random' for randomly generating seed else any integer value(default = 'Random')}

\item{SummaryStat}{Logical; TRUE if simulation level data is required(default = FALSE)}

\item{UpdateStrategy}{Logical to specify the updated strategy (Not Implemented yet) default FALSE}
}
\description{
Function to perform Adaptive GMCP simulation for Multi-Arm designs
}
\examples{
#######################################################################
#########   Script to Run adaptive gmcp Simulation examples ###########
#######################################################################

#-------------------Sample Size---------------------
SampleSize <- 500

#-----------------------Alpha------------------------
alpha <- 0.025

#----------------Information Fraction----------------
#The number of lookes is same as the length of info_frac
#For one look specify as 1
info_frac <- c(1/2,1)

#-------------------Boundary Type-------------------
# O'Brien & Fleming = 'OF', Pocock = 'P', Wang & Tsiatis Delta class = 'WT'
# Pampallona & Tsiatis = 'PT', Haybittle & Peto = 'HP',
# Optimum design within Wang & Tsiatis class = 'WToptimum'
# O'Brien & Fleming type alpha spending = 'asOF', Pocock type alpha spending = 'asP'
# Kim & DeMets alpha spending = 'asKD', Hwang, Shi & DeCani alpha spending = 'asHSD'
# no early efficacy stop = 'noEarlyEfficacy'
# default is "asOF"

typeOfDesign <- 'asOF'

#------------------Response Generation Parameters------------------
#Number of Arms(Including control)
nArms <- 5

#Arm-Wise Mean
Arms.Mean <- c(0,0.3,0.3,0.1,0.0)

#Arm-Wise Standard Deviations
Arms.std.dev <- c(1,1,1,1,1)

#Arm-Wise Allocation Ratio
Arms.alloc.ratio <- c(1,1,1,1,1)

#----------------Initial Weights---------------------
#The number of hypothesis(k) is same as the length of WI
WI <- c(1/2,1/2,0,0)

#---------------Transition Matrix--------------------
#The dimension of the matrix is (Number of Hypothesis x Number of Hypothesis)
G <- matrix(c(0,0.75,0.25,0,
              0.75,0,0,0.25,
              0,1,0,0,
              1,0,0,0),
            nrow = 4, byrow = TRUE)

#------------Plot the Testing Strategy---------------
#Group of hypothesis
hGroup <- c('P','P','S','S')

#Coordinates of the nodes(Hypothesis)
cordinates <- list(c(-1,1),c(1,1),c(-1,-1),c(1,-1))

#Plot
gmcpPlot(WI = WI, G = G, hGroup = hGroup, cordinates = cordinates)

#-------------------Test Type------------------------
# Testing Procedure
# Bonferroni = 'Bonf' , Sidak = 'Sidak', Simes ='Simes'
# Dunnett = 'Dunnett', Partly Parametric = 'Partly-Parametric'

test.type <- 'Partly-Parametric'


#---------------Correlation--------------------------
#Need to modify only for Dunnett and Partly Parametric test else will be ignored inside the code.
#The dimension of the matrix is (Number of Hypothesis x Number of Hypothesis)
Correlation <- matrix(c(1,0.5,NA,NA,
                        0.5,1,NA,NA,
                        NA,NA,1,0.5,
                        NA,NA,0.5,1),
                      byrow=TRUE, nrow= 4)


#--------------Selection-----------------------------
#Selection Choice; True if selection required at interim.
Selection <- TRUE

#SelectionLook: ScalerVector to specify the selection look/looks
SelectionLook <- 1

#SelectionMethods: Scale parameter on which selection will be based on. 'pvalue': p-value(un-adj) based selection (Currently available)
SelectionMethods <- 'pvalue'

#SelectionCriterion: best' = best r, 'threshold' = threshold for selection
SelectionCriterion = 'best'

#SelectionParmeter: r for best, threshold value for threshold
SelectionParmeter <- 1

#--------------------Multiple Winner & Implicit SSR---------------------------

#MultipleWinners = TRUE if multiple winners FALSE otherwise.
MultipleWinners <- TRUE

#ImplicitSSR:
#'Selection' if re-allocate samples only from de-selected arms to available arms
#'All': Allocate all the planned samples(for the look) to the available arms
#'None': No Re-allocation

ImplicitSSR <- 'All'

#---------------------------Simulation Parameters-------------------------------
#Number of simulation
nSimulation <- 1000

#Seed
Seed <- 100

#Option to see simulation-wise data
SummaryStat <- FALSE

#-----------------------Run Simulation--------------------------------------
#Please uncomment the following code to run the simulation(short-cut to uncomment 1.Select the lines, 2.ctr+shift+c)

# Results <- adaptGMCP_SIM(
#   SampleSize=SampleSize,alpha=alpha, nArms=nArms,Arms.Mean=Arms.Mean,Arms.std.dev=Arms.std.dev
#   ,Arms.alloc.ratio=Arms.alloc.ratio,WI=WI,G=G,test.type=test.type, Correlation = Correlation,
#   info_frac=info_frac,typeOfDesign = typeOfDesign, MultipleWinners=MultipleWinners,
#   Selection=Selection,SelectionLook=SelectionLook, SelectionMethods=SelectionMethods, SelectionCriterion=SelectionCriterion,SelectionParmeter=SelectionParmeter
#   ,ImplicitSSR=ImplicitSSR,
#   nSimulation=nSimulation,Seed=Seed,SummaryStat=SummaryStat
# )
# Results
}
